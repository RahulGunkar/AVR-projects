
encoder1.0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  0000036e  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000088  00000000  00000000  0000039e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004e3  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002d6  00000000  00000000  00000909  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000046a  00000000  00000000  00000bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000158  00000000  00000000  0000104c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000243  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000399  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000068  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__vector_7>
  1e:	00 00       	nop
  20:	46 c0       	rjmp	.+140    	; 0xae <__vector_8>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	60 d0       	rcall	.+192    	; 0x16a <main>
  aa:	25 c1       	rjmp	.+586    	; 0x2f6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_8>:
#include <avr/sfr_defs.h>
#include "USART_128.h"

volatile long tickcount = 0;

ISR(INT7_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
	tickcount++;
  c0:	80 91 00 01 	lds	r24, 0x0100
  c4:	90 91 01 01 	lds	r25, 0x0101
  c8:	a0 91 02 01 	lds	r26, 0x0102
  cc:	b0 91 03 01 	lds	r27, 0x0103
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
  d6:	80 93 00 01 	sts	0x0100, r24
  da:	90 93 01 01 	sts	0x0101, r25
  de:	a0 93 02 01 	sts	0x0102, r26
  e2:	b0 93 03 01 	sts	0x0103, r27

	}
  e6:	bf 91       	pop	r27
  e8:	af 91       	pop	r26
  ea:	9f 91       	pop	r25
  ec:	8f 91       	pop	r24
  ee:	0f 90       	pop	r0
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <__vector_7>:
	ISR(INT6_vect)
	{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
		tickcount--;
 10a:	80 91 00 01 	lds	r24, 0x0100
 10e:	90 91 01 01 	lds	r25, 0x0101
 112:	a0 91 02 01 	lds	r26, 0x0102
 116:	b0 91 03 01 	lds	r27, 0x0103
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	a1 09       	sbc	r26, r1
 11e:	b1 09       	sbc	r27, r1
 120:	80 93 00 01 	sts	0x0100, r24
 124:	90 93 01 01 	sts	0x0101, r25
 128:	a0 93 02 01 	sts	0x0102, r26
 12c:	b0 93 03 01 	sts	0x0103, r27
	}
 130:	bf 91       	pop	r27
 132:	af 91       	pop	r26
 134:	9f 91       	pop	r25
 136:	8f 91       	pop	r24
 138:	0f 90       	pop	r0
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	0f 90       	pop	r0
 13e:	1f 90       	pop	r1
 140:	18 95       	reti

00000142 <interrupt_config>:
	
void interrupt_config()
{
	DDRF |=(1<<PF0) | (1<<PF1); //extra vcc and ground
 142:	e1 e6       	ldi	r30, 0x61	; 97
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	83 60       	ori	r24, 0x03	; 3
 14a:	80 83       	st	Z, r24
	PORTF &=~(1<<PF0);
 14c:	e2 e6       	ldi	r30, 0x62	; 98
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	80 83       	st	Z, r24
	PORTF |= (1<<PF1);
 156:	80 81       	ld	r24, Z
 158:	82 60       	ori	r24, 0x02	; 2
 15a:	80 83       	st	Z, r24
	EIMSK |= (1<<INT7)|(1<<INT6);
 15c:	89 b7       	in	r24, 0x39	; 57
 15e:	80 6c       	ori	r24, 0xC0	; 192
 160:	89 bf       	out	0x39, r24	; 57
	EICRB |= (1<<ISC70)|(1<<ISC60);
 162:	8a b7       	in	r24, 0x3a	; 58
 164:	80 65       	ori	r24, 0x50	; 80
 166:	8a bf       	out	0x3a, r24	; 58
 168:	08 95       	ret

0000016a <main>:
}	

	int main(void)
{
	interrupt_config();
 16a:	eb df       	rcall	.-42     	; 0x142 <interrupt_config>
	USART_Init(51,0);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	1b d0       	rcall	.+54     	; 0x1aa <USART_Init>
	USART_Init(51,1);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	17 d0       	rcall	.+46     	; 0x1aa <USART_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	89 e6       	ldi	r24, 0x69	; 105
 180:	98 e1       	ldi	r25, 0x18	; 24
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x18>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x22>
 18c:	00 00       	nop
		while(1)
	{
		_delay_ms(1000);
		
	USART_TransmitNumber(tickcount,0);
 18e:	60 91 00 01 	lds	r22, 0x0100
 192:	70 91 01 01 	lds	r23, 0x0101
 196:	80 91 02 01 	lds	r24, 0x0102
 19a:	90 91 03 01 	lds	r25, 0x0103
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	30 d0       	rcall	.+96     	; 0x202 <USART_TransmitNumber>
	USART_Transmitchar(0x0d,0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	8d e0       	ldi	r24, 0x0D	; 13
 1a6:	1f d0       	rcall	.+62     	; 0x1e6 <USART_Transmitchar>
 1a8:	e9 cf       	rjmp	.-46     	; 0x17c <main+0x12>

000001aa <USART_Init>:
		 USART_Transmitchar(*str,n);
		 delay(10);
		 str++;
		// USART_Transmitchar(USART_Receive(1),0);
	 }
}
 1aa:	78 94       	sei
 1ac:	66 23       	and	r22, r22
 1ae:	79 f0       	breq	.+30     	; 0x1ce <USART_Init+0x24>
 1b0:	90 93 98 00 	sts	0x0098, r25
 1b4:	80 93 99 00 	sts	0x0099, r24
 1b8:	ea e9       	ldi	r30, 0x9A	; 154
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	80 83       	st	Z, r24
 1c2:	ed e9       	ldi	r30, 0x9D	; 157
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	80 83       	st	Z, r24
 1cc:	08 95       	ret
 1ce:	90 93 90 00 	sts	0x0090, r25
 1d2:	89 b9       	out	0x09, r24	; 9
 1d4:	8a b1       	in	r24, 0x0a	; 10
 1d6:	88 61       	ori	r24, 0x18	; 24
 1d8:	8a b9       	out	0x0a, r24	; 10
 1da:	e5 e9       	ldi	r30, 0x95	; 149
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	86 60       	ori	r24, 0x06	; 6
 1e2:	80 83       	st	Z, r24
 1e4:	08 95       	ret

000001e6 <USART_Transmitchar>:
 1e6:	66 23       	and	r22, r22
 1e8:	41 f0       	breq	.+16     	; 0x1fa <USART_Transmitchar+0x14>
 1ea:	eb e9       	ldi	r30, 0x9B	; 155
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	90 81       	ld	r25, Z
 1f0:	95 ff       	sbrs	r25, 5
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <USART_Transmitchar+0x8>
 1f4:	80 93 9c 00 	sts	0x009C, r24
 1f8:	08 95       	ret
 1fa:	5d 9b       	sbis	0x0b, 5	; 11
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <USART_Transmitchar+0x14>
 1fe:	8c b9       	out	0x0c, r24	; 12
 200:	08 95       	ret

00000202 <USART_TransmitNumber>:

void USART_TransmitNumber(long int num, uint8_t n)
{
 202:	bf 92       	push	r11
 204:	cf 92       	push	r12
 206:	df 92       	push	r13
 208:	ef 92       	push	r14
 20a:	ff 92       	push	r15
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	6b 01       	movw	r12, r22
 216:	7c 01       	movw	r14, r24
 218:	c4 2f       	mov	r28, r20
	if(num<0)
 21a:	99 23       	and	r25, r25
 21c:	5c f4       	brge	.+22     	; 0x234 <USART_TransmitNumber+0x32>
	{
		USART_Transmitchar('-',n);
 21e:	64 2f       	mov	r22, r20
 220:	8d e2       	ldi	r24, 0x2D	; 45
 222:	e1 df       	rcall	.-62     	; 0x1e6 <USART_Transmitchar>
		num=(-1)*num;
 224:	f0 94       	com	r15
 226:	e0 94       	com	r14
 228:	d0 94       	com	r13
 22a:	c0 94       	com	r12
 22c:	c1 1c       	adc	r12, r1
 22e:	d1 1c       	adc	r13, r1
 230:	e1 1c       	adc	r14, r1
 232:	f1 1c       	adc	r15, r1
	}
	
	if(num >= 10){
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	c8 16       	cp	r12, r24
 238:	d1 04       	cpc	r13, r1
 23a:	e1 04       	cpc	r14, r1
 23c:	f1 04       	cpc	r15, r1
 23e:	7c f0       	brlt	.+30     	; 0x25e <USART_TransmitNumber+0x5c>
    USART_TransmitNumber(num/10,n);
 240:	c7 01       	movw	r24, r14
 242:	b6 01       	movw	r22, r12
 244:	2a e0       	ldi	r18, 0x0A	; 10
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	16 d0       	rcall	.+44     	; 0x27a <__divmodsi4>
 24e:	69 01       	movw	r12, r18
 250:	7a 01       	movw	r14, r20
 252:	b6 2e       	mov	r11, r22
 254:	4c 2f       	mov	r20, r28
 256:	c7 01       	movw	r24, r14
 258:	b6 01       	movw	r22, r12
 25a:	d3 df       	rcall	.-90     	; 0x202 <USART_TransmitNumber>
    num = num%10;
 25c:	cb 2c       	mov	r12, r11
  }
  USART_Transmitchar(num+'0',n); /* n is between 0 and 9 */
 25e:	6c 2f       	mov	r22, r28
 260:	80 e3       	ldi	r24, 0x30	; 48
 262:	8c 0d       	add	r24, r12
 264:	c0 df       	rcall	.-128    	; 0x1e6 <USART_Transmitchar>
	
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	bf 90       	pop	r11
 278:	08 95       	ret

0000027a <__divmodsi4>:
 27a:	05 2e       	mov	r0, r21
 27c:	97 fb       	bst	r25, 7
 27e:	16 f4       	brtc	.+4      	; 0x284 <__divmodsi4+0xa>
 280:	00 94       	com	r0
 282:	0f d0       	rcall	.+30     	; 0x2a2 <__negsi2>
 284:	57 fd       	sbrc	r21, 7
 286:	05 d0       	rcall	.+10     	; 0x292 <__divmodsi4_neg2>
 288:	14 d0       	rcall	.+40     	; 0x2b2 <__udivmodsi4>
 28a:	07 fc       	sbrc	r0, 7
 28c:	02 d0       	rcall	.+4      	; 0x292 <__divmodsi4_neg2>
 28e:	46 f4       	brtc	.+16     	; 0x2a0 <__divmodsi4_exit>
 290:	08 c0       	rjmp	.+16     	; 0x2a2 <__negsi2>

00000292 <__divmodsi4_neg2>:
 292:	50 95       	com	r21
 294:	40 95       	com	r20
 296:	30 95       	com	r19
 298:	21 95       	neg	r18
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	4f 4f       	sbci	r20, 0xFF	; 255
 29e:	5f 4f       	sbci	r21, 0xFF	; 255

000002a0 <__divmodsi4_exit>:
 2a0:	08 95       	ret

000002a2 <__negsi2>:
 2a2:	90 95       	com	r25
 2a4:	80 95       	com	r24
 2a6:	70 95       	com	r23
 2a8:	61 95       	neg	r22
 2aa:	7f 4f       	sbci	r23, 0xFF	; 255
 2ac:	8f 4f       	sbci	r24, 0xFF	; 255
 2ae:	9f 4f       	sbci	r25, 0xFF	; 255
 2b0:	08 95       	ret

000002b2 <__udivmodsi4>:
 2b2:	a1 e2       	ldi	r26, 0x21	; 33
 2b4:	1a 2e       	mov	r1, r26
 2b6:	aa 1b       	sub	r26, r26
 2b8:	bb 1b       	sub	r27, r27
 2ba:	fd 01       	movw	r30, r26
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <__udivmodsi4_ep>

000002be <__udivmodsi4_loop>:
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	ee 1f       	adc	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	a2 17       	cp	r26, r18
 2c8:	b3 07       	cpc	r27, r19
 2ca:	e4 07       	cpc	r30, r20
 2cc:	f5 07       	cpc	r31, r21
 2ce:	20 f0       	brcs	.+8      	; 0x2d8 <__udivmodsi4_ep>
 2d0:	a2 1b       	sub	r26, r18
 2d2:	b3 0b       	sbc	r27, r19
 2d4:	e4 0b       	sbc	r30, r20
 2d6:	f5 0b       	sbc	r31, r21

000002d8 <__udivmodsi4_ep>:
 2d8:	66 1f       	adc	r22, r22
 2da:	77 1f       	adc	r23, r23
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	1a 94       	dec	r1
 2e2:	69 f7       	brne	.-38     	; 0x2be <__udivmodsi4_loop>
 2e4:	60 95       	com	r22
 2e6:	70 95       	com	r23
 2e8:	80 95       	com	r24
 2ea:	90 95       	com	r25
 2ec:	9b 01       	movw	r18, r22
 2ee:	ac 01       	movw	r20, r24
 2f0:	bd 01       	movw	r22, r26
 2f2:	cf 01       	movw	r24, r30
 2f4:	08 95       	ret

000002f6 <_exit>:
 2f6:	f8 94       	cli

000002f8 <__stop_program>:
 2f8:	ff cf       	rjmp	.-2      	; 0x2f8 <__stop_program>
